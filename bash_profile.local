# Disable logout Ctrl-D shortcut
# IGNOREEOF=10
# set -o ignoreeof  # Same as setting IGNOREEOF=10

# rbenv init
# eval "$(rbenv init -)"

# Set vi mode
# set -o vi

# X11 DISPLAY destination
# CLIENT_IP=`echo $SSH_CLIENT | awk '{print $1}'`
# export DISPLAY="$CLIENT_IP:0"

# Python
# export PYTHONPATH=~/lib/python2.6/site-packages

# Nvm
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Avn
[[ -s "$HOME/.avn/bin/avn.sh" ]] && source "$HOME/.avn/bin/avn.sh" # load avn

# Node
export NODE_PATH=$NODE_PATH:/usr/local/lib/jsctags/:$`npm root -g`
export PATH=$PATH:$HOME/node_modules/.bin:./node_modules/.bin

# Travis
[ -f ~/.travis/travis.sh ] && source ~/.travis/travis.sh

# Java
export JAVA_HOME=`/usr/libexec/java_home`

# Rvm
export PATH="$PATH:$HOME/.rvm/bin"
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

# Ruby Motion
export RUBYMOTION_ANDROID_SDK=~/.rubymotion-android/sdk

# Python

# Python environment pyenv
# export PATH="~/.pyenv/shims:${PATH}"

[ -x "$(command -v pip)" ] && eval "$(pip completion --bash)"
# [ -x "$(command -v pipenv)" ] && eval "$(pipenv --completion)"

# Auto start tmux
if command -v tmux>/dev/null; then
  # [[ ! $TERM =~ tmux ]] && [ -z $TMUX ] && exec tmux
  [[ ! $TERM =~ tmux ]] && [ -z $TMUX ] && tmux
fi

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

export SPARK_LOCAL_IP=127.0.0.1
export SPARK_HOME=~/codes/paypal/hadoop/test-spark/spark-2.4.0-bin-hadoop2.7

# node-gyp install failed on Mojave
# xcode-select /Applications/Xcode.app/Contents/Developer
export CXXFLAGS="-mmacosx-version-min=10.9"
export LDFLAGS="-mmacosx-version-min=10.9" npm install

# Git status displayed in another language if there is more
# than one input sources
export LANG="en_US.UTF-8"

# NVM - Auto switch node version
find-up () {
    path=$(pwd)
    while [[ "$path" != "" && ! -e "$path/$1" ]]; do
        path=${path%/*}
    done
    echo "$path"
}

cdnvm(){
    cd "$@";

    # Note: tr command wasn't working on MacOS
    # nvm_path=$(find-up .nvmrc | tr -d '[:space:]')
    nvm_path=$(find-up .nvmrc)

    # If there are no .nvmrc file, use the default nvm version
    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

        declare default_version;
        default_version=$(nvm version default);

        # If there is no default version, set it to `node`
        # This will use the latest version on your machine
        if [[ $default_version == "N/A" ]]; then
            nvm alias default node;
            default_version=$(nvm version default);
        fi

        # If the current version is not the default version, set it to use the default version
        if [[ $(nvm current) != "$default_version" ]]; then
            nvm use default;
        fi

        elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
        declare nvm_version
        nvm_version=$(<"$nvm_path"/.nvmrc)

        echo $nvm_version

        # Add the `v` suffix if it does not exists in the .nvmrc file
        if [[ $nvm_version != v* ]]; then
            nvm_version="v""$nvm_version"
        fi

        # If it is not already installed, install it
        if [[ $(nvm ls "$nvm_version" | tr -d '[:space:]') == "N/A" ]]; then
            nvm install "$nvm_version";
        fi

        if [[ $(nvm current) != "$nvm_version" ]]; then
            nvm use "$nvm_version";
        fi
    fi
}

alias cd='cdnvm'
